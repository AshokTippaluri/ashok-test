pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
    }

    parameters {
        choice(name: 'ACTION', choices: ['build', 'destroy'], description: 'Select build or destroy operation')
    }

    environment {
        NAME_SPACE = 'withk8s'
        MONGO_IMAGE = 'mongodb'
        NODEJS_IMAGE = 'nodejs'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AshokTippaluri/ashok-test.git'
            }
        }

        stage('Build Docker Images') {
            when {
                equals expected: 'build', actual: "${params.ACTION}"
            }
            steps {
                script {
                    // Build Node.js image
                    sh 'docker build -t ${NODEJS_IMAGE} ./withk8/'

                    // Build MongoDB image
                    sh 'docker build -t ${MONGO_IMAGE} ./withk8/mongodb/'

                    // List images to confirm
                    sh 'docker images'
                }
            }
        }

        stage('Load Image to Kind') {
            when {
                equals expected: 'build', actual: "${params.ACTION}"
            }
            steps {
                script {
                    // Create network and volume
                    sh 'kind load docker-image ${NODEJS_IMAGE}'
                    sh 'kind load docker-image ${MONGO_IMAGE}'
                }
            }
        }

        stage('Apply Kubernetes Manifests') {
            when {
                equals expected: 'build', actual: "${params.ACTION}"
            }
            steps {
                script {
                    sh "kubectl apply -f withk8/k8s/withk8ns.yaml"
                    sh "kubectl apply -f withk8/k8s/mongodb-deployment.yaml"
                    sh "kubectl apply -f withk8/k8s/web-deployment.yaml"
                }
            }
        }

        stage('Wait for Pods to be Ready') {
            steps {
                script {
                    sh "kubectl wait --for=condition=ready pod -l app=nodejs -n ${NAMESPACE} --timeout=120s"
                    sh "kubectl wait --for=condition=ready pod -l app=mongodb -n ${NAMESPACE} --timeout=120s"
                }
            }
        }



        stage('Health Check') {
            when {
                equals expected: 'build', actual: "${params.ACTION}"
            }
            steps {
                script {
                    // Verify the Node.js app
                    sh "kubectl port-forward svc/nodejs 8085:8080 -n ${NAMESPACE} &"
                    sh 'curl -f http://localhost:8085/items || exit 1'

                    // Verify MongoDB connection from Node.js container
                    sh 'docker exec nodejs ping -c 4 mongodb'
                }
            }
        }

        stage('Cleanup') {
            when {
                equals expected: 'destroy', actual: "${params.ACTION}"
            }
            steps {
                script {
                    // Stop and remove containers
                    sh "kubectl delete namespace ${NAMESPACE}"
                }
            }
        }
    }

    post {
        always {
            // Cleanup any running containers and networks if necessary
            sh 'docker system prune -a -f --volumes|| true'
        }
        success {
            echo "üéâ Deployment Successful!"
        }
        failure {
            echo "‚ùå Deployment Failed!"
        }
    }
}
